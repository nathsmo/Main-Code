actor_net_lr: 0.0001
batch_size: 128
beam_width: 10
critic_net_lr: 0.0001
data_dir: data
decode_len: 20
decoder: pointer
disable_tqdm: True
dropout: 0.1
emb_type: linear
embedding_dim: 128
entropy_coeff: 0.0
forget_bias: 1.0
gpu: 3
hidden_dim: 128
infer_type: single
input_dim: 2
is_train: False
load_path: 
log_dir: logs/tsp20-2024-05-29_17-39-29
log_interval: 200
mask_glimpses: True
mask_pointer: True
max_grad_norm: 2.0
model_dir: ./logs/tsp20/A2/model/agent_complete.pth
n_glimpses: 0
n_nodes: 20
n_process_blocks: 3
n_train: 25000
num_heads: 1
random_seed: 24601
rnn_layers: 1
save_interval: 10000
stdout_print: True
tanh_exploration: 10.0
task: tsp20
task_name: tsp
test_interval: 200
test_size: 1000
use_tanh: False
variation: A2
# Set random seed to 24601
# Set parameters for this run:
# Variation:    A2
# Task:         tsp20
# Decoder:      pointer
# Embed type:   linear
# n_glimpses:   0
# rnn layers:   1
# n_train:      25000
# num heads:    1
Embedding - linear
Agent created - Pointer Network.
Evaluation started ...


Val-Step of greedy: 0

Example test input: [[tensor(0.7140), tensor(0.8641)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.4657), tensor(0.0063)], [tensor(0.2547), tensor(0.5348)], [tensor(0.6982), tensor(0.6354)], [tensor(0.2960), tensor(0.2944)], [tensor(0.3696), tensor(0.4191)], [tensor(0.4550), tensor(0.4347)], [tensor(0.5253), tensor(0.1383)], [tensor(0.1543), tensor(0.3718)], [tensor(0.7684), tensor(0.5362)], [tensor(0.2751), tensor(0.7631)], [tensor(0.2150), tensor(0.7472)], [tensor(0.9030), tensor(0.7839)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.1431), tensor(0.0637)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.4144)]]

Example test output: [[tensor(0.1431), tensor(0.0637)], [tensor(0.1543), tensor(0.3718)], [tensor(0.2150), tensor(0.7472)], [tensor(0.2547), tensor(0.5348)], [tensor(0.2960), tensor(0.2944)], [tensor(0.2751), tensor(0.7631)], [tensor(0.3696), tensor(0.4191)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.0063)], [tensor(0.4550), tensor(0.4347)], [tensor(0.4657), tensor(0.4144)], [tensor(0.5253), tensor(0.1383)], [tensor(0.6982), tensor(0.6354)], [tensor(0.7140), tensor(0.8641)], [tensor(0.7684), tensor(0.5362)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.9030), tensor(0.7839)]]

Example test reward: -6.889536380767822 - best: 0


Val-Step of greedy: 0

Example test input: [[tensor(0.7140), tensor(0.8641)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.4657), tensor(0.0063)], [tensor(0.2547), tensor(0.5348)], [tensor(0.6982), tensor(0.6354)], [tensor(0.2960), tensor(0.2944)], [tensor(0.3696), tensor(0.4191)], [tensor(0.4550), tensor(0.4347)], [tensor(0.5253), tensor(0.1383)], [tensor(0.1543), tensor(0.3718)], [tensor(0.7684), tensor(0.5362)], [tensor(0.2751), tensor(0.7631)], [tensor(0.2150), tensor(0.7472)], [tensor(0.9030), tensor(0.7839)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.1431), tensor(0.0637)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.4144)]]

Example test output: [[tensor(0.1431), tensor(0.0637)], [tensor(0.1543), tensor(0.3718)], [tensor(0.2150), tensor(0.7472)], [tensor(0.2547), tensor(0.5348)], [tensor(0.2960), tensor(0.2944)], [tensor(0.2751), tensor(0.7631)], [tensor(0.3696), tensor(0.4191)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.0063)], [tensor(0.4550), tensor(0.4347)], [tensor(0.4657), tensor(0.4144)], [tensor(0.5253), tensor(0.1383)], [tensor(0.6982), tensor(0.6354)], [tensor(0.7140), tensor(0.8641)], [tensor(0.7684), tensor(0.5362)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.9030), tensor(0.7839)]]

Example test reward: -6.889536380767822 - best: 0


Val-Step of greedy: 0

Example test input: [[tensor(0.7140), tensor(0.8641)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.4657), tensor(0.0063)], [tensor(0.2547), tensor(0.5348)], [tensor(0.6982), tensor(0.6354)], [tensor(0.2960), tensor(0.2944)], [tensor(0.3696), tensor(0.4191)], [tensor(0.4550), tensor(0.4347)], [tensor(0.5253), tensor(0.1383)], [tensor(0.1543), tensor(0.3718)], [tensor(0.7684), tensor(0.5362)], [tensor(0.2751), tensor(0.7631)], [tensor(0.2150), tensor(0.7472)], [tensor(0.9030), tensor(0.7839)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.1431), tensor(0.0637)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.4144)]]

Example test output: [[tensor(0.1431), tensor(0.0637)], [tensor(0.1543), tensor(0.3718)], [tensor(0.2150), tensor(0.7472)], [tensor(0.2547), tensor(0.5348)], [tensor(0.2960), tensor(0.2944)], [tensor(0.2751), tensor(0.7631)], [tensor(0.3696), tensor(0.4191)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.0063)], [tensor(0.4550), tensor(0.4347)], [tensor(0.4657), tensor(0.4144)], [tensor(0.5253), tensor(0.1383)], [tensor(0.6982), tensor(0.6354)], [tensor(0.7140), tensor(0.8641)], [tensor(0.7684), tensor(0.5362)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.9030), tensor(0.7839)]]

Example test reward: -6.889536380767822 - best: 0


Val-Step of greedy: 0

Example test input: [[tensor(0.7140), tensor(0.8641)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.4657), tensor(0.0063)], [tensor(0.2547), tensor(0.5348)], [tensor(0.6982), tensor(0.6354)], [tensor(0.2960), tensor(0.2944)], [tensor(0.3696), tensor(0.4191)], [tensor(0.4550), tensor(0.4347)], [tensor(0.5253), tensor(0.1383)], [tensor(0.1543), tensor(0.3718)], [tensor(0.7684), tensor(0.5362)], [tensor(0.2751), tensor(0.7631)], [tensor(0.2150), tensor(0.7472)], [tensor(0.9030), tensor(0.7839)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.1431), tensor(0.0637)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.4144)]]

Example test output: [[tensor(0.1431), tensor(0.0637)], [tensor(0.1543), tensor(0.3718)], [tensor(0.2150), tensor(0.7472)], [tensor(0.2547), tensor(0.5348)], [tensor(0.2960), tensor(0.2944)], [tensor(0.2751), tensor(0.7631)], [tensor(0.3696), tensor(0.4191)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.0063)], [tensor(0.4550), tensor(0.4347)], [tensor(0.4657), tensor(0.4144)], [tensor(0.5253), tensor(0.1383)], [tensor(0.6982), tensor(0.6354)], [tensor(0.7140), tensor(0.8641)], [tensor(0.7684), tensor(0.5362)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.9030), tensor(0.7839)]]

Example test reward: -6.889536380767822 - best: 0


Val-Step of greedy: 0

Example test input: [[tensor(0.7140), tensor(0.8641)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.4657), tensor(0.0063)], [tensor(0.2547), tensor(0.5348)], [tensor(0.6982), tensor(0.6354)], [tensor(0.2960), tensor(0.2944)], [tensor(0.3696), tensor(0.4191)], [tensor(0.4550), tensor(0.4347)], [tensor(0.5253), tensor(0.1383)], [tensor(0.1543), tensor(0.3718)], [tensor(0.7684), tensor(0.5362)], [tensor(0.2751), tensor(0.7631)], [tensor(0.2150), tensor(0.7472)], [tensor(0.9030), tensor(0.7839)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.1431), tensor(0.0637)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.4144)]]

Example test output: [[tensor(0.1431), tensor(0.0637)], [tensor(0.1543), tensor(0.3718)], [tensor(0.2150), tensor(0.7472)], [tensor(0.2547), tensor(0.5348)], [tensor(0.2960), tensor(0.2944)], [tensor(0.2751), tensor(0.7631)], [tensor(0.3696), tensor(0.4191)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.0063)], [tensor(0.4550), tensor(0.4347)], [tensor(0.4657), tensor(0.4144)], [tensor(0.5253), tensor(0.1383)], [tensor(0.6982), tensor(0.6354)], [tensor(0.7140), tensor(0.8641)], [tensor(0.7684), tensor(0.5362)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.9030), tensor(0.7839)]]

Example test reward: -6.889536380767822 - best: 0


Val-Step of greedy: 0

Example test input: [[tensor(0.7140), tensor(0.8641)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.4657), tensor(0.0063)], [tensor(0.2547), tensor(0.5348)], [tensor(0.6982), tensor(0.6354)], [tensor(0.2960), tensor(0.2944)], [tensor(0.3696), tensor(0.4191)], [tensor(0.4550), tensor(0.4347)], [tensor(0.5253), tensor(0.1383)], [tensor(0.1543), tensor(0.3718)], [tensor(0.7684), tensor(0.5362)], [tensor(0.2751), tensor(0.7631)], [tensor(0.2150), tensor(0.7472)], [tensor(0.9030), tensor(0.7839)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.1431), tensor(0.0637)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.4144)]]

Example test output: [[tensor(0.1431), tensor(0.0637)], [tensor(0.1543), tensor(0.3718)], [tensor(0.2150), tensor(0.7472)], [tensor(0.2547), tensor(0.5348)], [tensor(0.2960), tensor(0.2944)], [tensor(0.2751), tensor(0.7631)], [tensor(0.3696), tensor(0.4191)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.0063)], [tensor(0.4550), tensor(0.4347)], [tensor(0.4657), tensor(0.4144)], [tensor(0.5253), tensor(0.1383)], [tensor(0.6982), tensor(0.6354)], [tensor(0.7140), tensor(0.8641)], [tensor(0.7684), tensor(0.5362)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.9030), tensor(0.7839)]]

Example test reward: -6.889536380767822 - best: 0


Val-Step of greedy: 0

Example test input: [[tensor(0.7140), tensor(0.8641)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.4657), tensor(0.0063)], [tensor(0.2547), tensor(0.5348)], [tensor(0.6982), tensor(0.6354)], [tensor(0.2960), tensor(0.2944)], [tensor(0.3696), tensor(0.4191)], [tensor(0.4550), tensor(0.4347)], [tensor(0.5253), tensor(0.1383)], [tensor(0.1543), tensor(0.3718)], [tensor(0.7684), tensor(0.5362)], [tensor(0.2751), tensor(0.7631)], [tensor(0.2150), tensor(0.7472)], [tensor(0.9030), tensor(0.7839)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.1431), tensor(0.0637)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.4144)]]

Example test output: [[tensor(0.1431), tensor(0.0637)], [tensor(0.1543), tensor(0.3718)], [tensor(0.2150), tensor(0.7472)], [tensor(0.2547), tensor(0.5348)], [tensor(0.2960), tensor(0.2944)], [tensor(0.2751), tensor(0.7631)], [tensor(0.3696), tensor(0.4191)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.0063)], [tensor(0.4550), tensor(0.4347)], [tensor(0.4657), tensor(0.4144)], [tensor(0.5253), tensor(0.1383)], [tensor(0.6982), tensor(0.6354)], [tensor(0.7140), tensor(0.8641)], [tensor(0.7684), tensor(0.5362)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.9030), tensor(0.7839)]]

Example test reward: -6.889536380767822 - best: 0


Val-Step of greedy: 0

Example test input: [[tensor(0.7140), tensor(0.8641)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.4657), tensor(0.0063)], [tensor(0.2547), tensor(0.5348)], [tensor(0.6982), tensor(0.6354)], [tensor(0.2960), tensor(0.2944)], [tensor(0.3696), tensor(0.4191)], [tensor(0.4550), tensor(0.4347)], [tensor(0.5253), tensor(0.1383)], [tensor(0.1543), tensor(0.3718)], [tensor(0.7684), tensor(0.5362)], [tensor(0.2751), tensor(0.7631)], [tensor(0.2150), tensor(0.7472)], [tensor(0.9030), tensor(0.7839)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.1431), tensor(0.0637)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.4144)]]

Example test output: [[tensor(0.1431), tensor(0.0637)], [tensor(0.1543), tensor(0.3718)], [tensor(0.2150), tensor(0.7472)], [tensor(0.2547), tensor(0.5348)], [tensor(0.2960), tensor(0.2944)], [tensor(0.2751), tensor(0.7631)], [tensor(0.3696), tensor(0.4191)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.0063)], [tensor(0.4550), tensor(0.4347)], [tensor(0.4657), tensor(0.4144)], [tensor(0.5253), tensor(0.1383)], [tensor(0.6982), tensor(0.6354)], [tensor(0.7140), tensor(0.8641)], [tensor(0.7684), tensor(0.5362)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.9030), tensor(0.7839)]]

Example test reward: -6.889536380767822 - best: 0


Val-Step of greedy: 200

Example test input: [[tensor(0.7140), tensor(0.8641)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.4657), tensor(0.0063)], [tensor(0.2547), tensor(0.5348)], [tensor(0.6982), tensor(0.6354)], [tensor(0.2960), tensor(0.2944)], [tensor(0.3696), tensor(0.4191)], [tensor(0.4550), tensor(0.4347)], [tensor(0.5253), tensor(0.1383)], [tensor(0.1543), tensor(0.3718)], [tensor(0.7684), tensor(0.5362)], [tensor(0.2751), tensor(0.7631)], [tensor(0.2150), tensor(0.7472)], [tensor(0.9030), tensor(0.7839)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.1431), tensor(0.0637)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.4144)]]

Example test output: [[tensor(0.1431), tensor(0.0637)], [tensor(0.1543), tensor(0.3718)], [tensor(0.2150), tensor(0.7472)], [tensor(0.2547), tensor(0.5348)], [tensor(0.2960), tensor(0.2944)], [tensor(0.2751), tensor(0.7631)], [tensor(0.3696), tensor(0.4191)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.0063)], [tensor(0.4550), tensor(0.4347)], [tensor(0.4657), tensor(0.4144)], [tensor(0.5253), tensor(0.1383)], [tensor(0.6982), tensor(0.6354)], [tensor(0.7140), tensor(0.8641)], [tensor(0.7684), tensor(0.5362)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.9030), tensor(0.7839)]]

Example test reward: -6.889536380767822 - best: 0


Val-Step of greedy: 200

Example test input: [[tensor(0.7140), tensor(0.8641)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.4657), tensor(0.0063)], [tensor(0.2547), tensor(0.5348)], [tensor(0.6982), tensor(0.6354)], [tensor(0.2960), tensor(0.2944)], [tensor(0.3696), tensor(0.4191)], [tensor(0.4550), tensor(0.4347)], [tensor(0.5253), tensor(0.1383)], [tensor(0.1543), tensor(0.3718)], [tensor(0.7684), tensor(0.5362)], [tensor(0.2751), tensor(0.7631)], [tensor(0.2150), tensor(0.7472)], [tensor(0.9030), tensor(0.7839)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.1431), tensor(0.0637)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.4144)]]

Example test output: [[tensor(0.1431), tensor(0.0637)], [tensor(0.1543), tensor(0.3718)], [tensor(0.2150), tensor(0.7472)], [tensor(0.2547), tensor(0.5348)], [tensor(0.2960), tensor(0.2944)], [tensor(0.2751), tensor(0.7631)], [tensor(0.3696), tensor(0.4191)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.0063)], [tensor(0.4550), tensor(0.4347)], [tensor(0.4657), tensor(0.4144)], [tensor(0.5253), tensor(0.1383)], [tensor(0.6982), tensor(0.6354)], [tensor(0.7140), tensor(0.8641)], [tensor(0.7684), tensor(0.5362)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.9030), tensor(0.7839)]]

Example test reward: -6.889536380767822 - best: 0


Val-Step of greedy: 200

Example test input: [[tensor(0.7140), tensor(0.8641)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.4657), tensor(0.0063)], [tensor(0.2547), tensor(0.5348)], [tensor(0.6982), tensor(0.6354)], [tensor(0.2960), tensor(0.2944)], [tensor(0.3696), tensor(0.4191)], [tensor(0.4550), tensor(0.4347)], [tensor(0.5253), tensor(0.1383)], [tensor(0.1543), tensor(0.3718)], [tensor(0.7684), tensor(0.5362)], [tensor(0.2751), tensor(0.7631)], [tensor(0.2150), tensor(0.7472)], [tensor(0.9030), tensor(0.7839)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.1431), tensor(0.0637)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.4144)]]

Example test output: [[tensor(0.1431), tensor(0.0637)], [tensor(0.1543), tensor(0.3718)], [tensor(0.2150), tensor(0.7472)], [tensor(0.2547), tensor(0.5348)], [tensor(0.2960), tensor(0.2944)], [tensor(0.2751), tensor(0.7631)], [tensor(0.3696), tensor(0.4191)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.0063)], [tensor(0.4550), tensor(0.4347)], [tensor(0.4657), tensor(0.4144)], [tensor(0.5253), tensor(0.1383)], [tensor(0.6982), tensor(0.6354)], [tensor(0.7140), tensor(0.8641)], [tensor(0.7684), tensor(0.5362)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.9030), tensor(0.7839)]]

Example test reward: -6.889536380767822 - best: 0


Val-Step of greedy: 200

Example test input: [[tensor(0.7140), tensor(0.8641)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.4657), tensor(0.0063)], [tensor(0.2547), tensor(0.5348)], [tensor(0.6982), tensor(0.6354)], [tensor(0.2960), tensor(0.2944)], [tensor(0.3696), tensor(0.4191)], [tensor(0.4550), tensor(0.4347)], [tensor(0.5253), tensor(0.1383)], [tensor(0.1543), tensor(0.3718)], [tensor(0.7684), tensor(0.5362)], [tensor(0.2751), tensor(0.7631)], [tensor(0.2150), tensor(0.7472)], [tensor(0.9030), tensor(0.7839)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.1431), tensor(0.0637)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.4144)]]

Example test output: [[tensor(0.1431), tensor(0.0637)], [tensor(0.1543), tensor(0.3718)], [tensor(0.2150), tensor(0.7472)], [tensor(0.2547), tensor(0.5348)], [tensor(0.2960), tensor(0.2944)], [tensor(0.2751), tensor(0.7631)], [tensor(0.3696), tensor(0.4191)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.0063)], [tensor(0.4550), tensor(0.4347)], [tensor(0.4657), tensor(0.4144)], [tensor(0.5253), tensor(0.1383)], [tensor(0.6982), tensor(0.6354)], [tensor(0.7140), tensor(0.8641)], [tensor(0.7684), tensor(0.5362)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.9030), tensor(0.7839)]]

Example test reward: -6.889536380767822 - best: 0


Val-Step of greedy: 200

Example test input: [[tensor(0.7140), tensor(0.8641)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.4657), tensor(0.0063)], [tensor(0.2547), tensor(0.5348)], [tensor(0.6982), tensor(0.6354)], [tensor(0.2960), tensor(0.2944)], [tensor(0.3696), tensor(0.4191)], [tensor(0.4550), tensor(0.4347)], [tensor(0.5253), tensor(0.1383)], [tensor(0.1543), tensor(0.3718)], [tensor(0.7684), tensor(0.5362)], [tensor(0.2751), tensor(0.7631)], [tensor(0.2150), tensor(0.7472)], [tensor(0.9030), tensor(0.7839)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.1431), tensor(0.0637)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.4144)]]

Example test output: [[tensor(0.1431), tensor(0.0637)], [tensor(0.1543), tensor(0.3718)], [tensor(0.2150), tensor(0.7472)], [tensor(0.2547), tensor(0.5348)], [tensor(0.2960), tensor(0.2944)], [tensor(0.2751), tensor(0.7631)], [tensor(0.3696), tensor(0.4191)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.0063)], [tensor(0.4550), tensor(0.4347)], [tensor(0.4657), tensor(0.4144)], [tensor(0.5253), tensor(0.1383)], [tensor(0.6982), tensor(0.6354)], [tensor(0.7140), tensor(0.8641)], [tensor(0.7684), tensor(0.5362)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.9030), tensor(0.7839)]]

Example test reward: -6.889536380767822 - best: 0


Val-Step of greedy: 200

Example test input: [[tensor(0.7140), tensor(0.8641)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.4657), tensor(0.0063)], [tensor(0.2547), tensor(0.5348)], [tensor(0.6982), tensor(0.6354)], [tensor(0.2960), tensor(0.2944)], [tensor(0.3696), tensor(0.4191)], [tensor(0.4550), tensor(0.4347)], [tensor(0.5253), tensor(0.1383)], [tensor(0.1543), tensor(0.3718)], [tensor(0.7684), tensor(0.5362)], [tensor(0.2751), tensor(0.7631)], [tensor(0.2150), tensor(0.7472)], [tensor(0.9030), tensor(0.7839)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.1431), tensor(0.0637)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.4144)]]

Example test output: [[tensor(0.1431), tensor(0.0637)], [tensor(0.1543), tensor(0.3718)], [tensor(0.2150), tensor(0.7472)], [tensor(0.2547), tensor(0.5348)], [tensor(0.2960), tensor(0.2944)], [tensor(0.2751), tensor(0.7631)], [tensor(0.3696), tensor(0.4191)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.0063)], [tensor(0.4550), tensor(0.4347)], [tensor(0.4657), tensor(0.4144)], [tensor(0.5253), tensor(0.1383)], [tensor(0.6982), tensor(0.6354)], [tensor(0.7140), tensor(0.8641)], [tensor(0.7684), tensor(0.5362)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.9030), tensor(0.7839)]]

Example test reward: -6.889536380767822 - best: 0


Val-Step of greedy: 200

Example test input: [[tensor(0.7140), tensor(0.8641)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.4657), tensor(0.0063)], [tensor(0.2547), tensor(0.5348)], [tensor(0.6982), tensor(0.6354)], [tensor(0.2960), tensor(0.2944)], [tensor(0.3696), tensor(0.4191)], [tensor(0.4550), tensor(0.4347)], [tensor(0.5253), tensor(0.1383)], [tensor(0.1543), tensor(0.3718)], [tensor(0.7684), tensor(0.5362)], [tensor(0.2751), tensor(0.7631)], [tensor(0.2150), tensor(0.7472)], [tensor(0.9030), tensor(0.7839)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.1431), tensor(0.0637)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.4144)]]

Example test output: [[tensor(0.1431), tensor(0.0637)], [tensor(0.1543), tensor(0.3718)], [tensor(0.2150), tensor(0.7472)], [tensor(0.2547), tensor(0.5348)], [tensor(0.2960), tensor(0.2944)], [tensor(0.2751), tensor(0.7631)], [tensor(0.3696), tensor(0.4191)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.0063)], [tensor(0.4550), tensor(0.4347)], [tensor(0.4657), tensor(0.4144)], [tensor(0.5253), tensor(0.1383)], [tensor(0.6982), tensor(0.6354)], [tensor(0.7140), tensor(0.8641)], [tensor(0.7684), tensor(0.5362)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.9030), tensor(0.7839)]]

Example test reward: -6.889536380767822 - best: 0


Val-Step of greedy: 200

Example test input: [[tensor(0.7140), tensor(0.8641)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.4657), tensor(0.0063)], [tensor(0.2547), tensor(0.5348)], [tensor(0.6982), tensor(0.6354)], [tensor(0.2960), tensor(0.2944)], [tensor(0.3696), tensor(0.4191)], [tensor(0.4550), tensor(0.4347)], [tensor(0.5253), tensor(0.1383)], [tensor(0.1543), tensor(0.3718)], [tensor(0.7684), tensor(0.5362)], [tensor(0.2751), tensor(0.7631)], [tensor(0.2150), tensor(0.7472)], [tensor(0.9030), tensor(0.7839)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.1431), tensor(0.0637)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.4144)]]

Example test output: [[tensor(0.1431), tensor(0.0637)], [tensor(0.1543), tensor(0.3718)], [tensor(0.2150), tensor(0.7472)], [tensor(0.2547), tensor(0.5348)], [tensor(0.2960), tensor(0.2944)], [tensor(0.2751), tensor(0.7631)], [tensor(0.3696), tensor(0.4191)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.0063)], [tensor(0.4550), tensor(0.4347)], [tensor(0.4657), tensor(0.4144)], [tensor(0.5253), tensor(0.1383)], [tensor(0.6982), tensor(0.6354)], [tensor(0.7140), tensor(0.8641)], [tensor(0.7684), tensor(0.5362)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.9030), tensor(0.7839)]]

Example test reward: -6.889536380767822 - best: 0


Val-Step of greedy: 400

Example test input: [[tensor(0.7140), tensor(0.8641)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.4657), tensor(0.0063)], [tensor(0.2547), tensor(0.5348)], [tensor(0.6982), tensor(0.6354)], [tensor(0.2960), tensor(0.2944)], [tensor(0.3696), tensor(0.4191)], [tensor(0.4550), tensor(0.4347)], [tensor(0.5253), tensor(0.1383)], [tensor(0.1543), tensor(0.3718)], [tensor(0.7684), tensor(0.5362)], [tensor(0.2751), tensor(0.7631)], [tensor(0.2150), tensor(0.7472)], [tensor(0.9030), tensor(0.7839)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.1431), tensor(0.0637)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.4144)]]

Example test output: [[tensor(0.1431), tensor(0.0637)], [tensor(0.1543), tensor(0.3718)], [tensor(0.2150), tensor(0.7472)], [tensor(0.2547), tensor(0.5348)], [tensor(0.2960), tensor(0.2944)], [tensor(0.2751), tensor(0.7631)], [tensor(0.3696), tensor(0.4191)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.0063)], [tensor(0.4550), tensor(0.4347)], [tensor(0.4657), tensor(0.4144)], [tensor(0.5253), tensor(0.1383)], [tensor(0.6982), tensor(0.6354)], [tensor(0.7140), tensor(0.8641)], [tensor(0.7684), tensor(0.5362)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.9030), tensor(0.7839)]]

Example test reward: -6.889536380767822 - best: 0


Val-Step of greedy: 400

Example test input: [[tensor(0.7140), tensor(0.8641)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.4657), tensor(0.0063)], [tensor(0.2547), tensor(0.5348)], [tensor(0.6982), tensor(0.6354)], [tensor(0.2960), tensor(0.2944)], [tensor(0.3696), tensor(0.4191)], [tensor(0.4550), tensor(0.4347)], [tensor(0.5253), tensor(0.1383)], [tensor(0.1543), tensor(0.3718)], [tensor(0.7684), tensor(0.5362)], [tensor(0.2751), tensor(0.7631)], [tensor(0.2150), tensor(0.7472)], [tensor(0.9030), tensor(0.7839)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.1431), tensor(0.0637)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.4144)]]

Example test output: [[tensor(0.1431), tensor(0.0637)], [tensor(0.1543), tensor(0.3718)], [tensor(0.2150), tensor(0.7472)], [tensor(0.2547), tensor(0.5348)], [tensor(0.2960), tensor(0.2944)], [tensor(0.2751), tensor(0.7631)], [tensor(0.3696), tensor(0.4191)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.0063)], [tensor(0.4550), tensor(0.4347)], [tensor(0.4657), tensor(0.4144)], [tensor(0.5253), tensor(0.1383)], [tensor(0.6982), tensor(0.6354)], [tensor(0.7140), tensor(0.8641)], [tensor(0.7684), tensor(0.5362)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.9030), tensor(0.7839)]]

Example test reward: -6.889536380767822 - best: 0


Val-Step of greedy: 400

Example test input: [[tensor(0.7140), tensor(0.8641)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.4657), tensor(0.0063)], [tensor(0.2547), tensor(0.5348)], [tensor(0.6982), tensor(0.6354)], [tensor(0.2960), tensor(0.2944)], [tensor(0.3696), tensor(0.4191)], [tensor(0.4550), tensor(0.4347)], [tensor(0.5253), tensor(0.1383)], [tensor(0.1543), tensor(0.3718)], [tensor(0.7684), tensor(0.5362)], [tensor(0.2751), tensor(0.7631)], [tensor(0.2150), tensor(0.7472)], [tensor(0.9030), tensor(0.7839)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.1431), tensor(0.0637)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.4144)]]

Example test output: [[tensor(0.1431), tensor(0.0637)], [tensor(0.1543), tensor(0.3718)], [tensor(0.2150), tensor(0.7472)], [tensor(0.2547), tensor(0.5348)], [tensor(0.2960), tensor(0.2944)], [tensor(0.2751), tensor(0.7631)], [tensor(0.3696), tensor(0.4191)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.0063)], [tensor(0.4550), tensor(0.4347)], [tensor(0.4657), tensor(0.4144)], [tensor(0.5253), tensor(0.1383)], [tensor(0.6982), tensor(0.6354)], [tensor(0.7140), tensor(0.8641)], [tensor(0.7684), tensor(0.5362)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.9030), tensor(0.7839)]]

Example test reward: -6.889536380767822 - best: 0


Val-Step of greedy: 400

Example test input: [[tensor(0.7140), tensor(0.8641)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.4657), tensor(0.0063)], [tensor(0.2547), tensor(0.5348)], [tensor(0.6982), tensor(0.6354)], [tensor(0.2960), tensor(0.2944)], [tensor(0.3696), tensor(0.4191)], [tensor(0.4550), tensor(0.4347)], [tensor(0.5253), tensor(0.1383)], [tensor(0.1543), tensor(0.3718)], [tensor(0.7684), tensor(0.5362)], [tensor(0.2751), tensor(0.7631)], [tensor(0.2150), tensor(0.7472)], [tensor(0.9030), tensor(0.7839)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.1431), tensor(0.0637)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.4144)]]

Example test output: [[tensor(0.1431), tensor(0.0637)], [tensor(0.1543), tensor(0.3718)], [tensor(0.2150), tensor(0.7472)], [tensor(0.2547), tensor(0.5348)], [tensor(0.2960), tensor(0.2944)], [tensor(0.2751), tensor(0.7631)], [tensor(0.3696), tensor(0.4191)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.0063)], [tensor(0.4550), tensor(0.4347)], [tensor(0.4657), tensor(0.4144)], [tensor(0.5253), tensor(0.1383)], [tensor(0.6982), tensor(0.6354)], [tensor(0.7140), tensor(0.8641)], [tensor(0.7684), tensor(0.5362)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.9030), tensor(0.7839)]]

Example test reward: -6.889536380767822 - best: 0


Val-Step of greedy: 400

Example test input: [[tensor(0.7140), tensor(0.8641)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.4657), tensor(0.0063)], [tensor(0.2547), tensor(0.5348)], [tensor(0.6982), tensor(0.6354)], [tensor(0.2960), tensor(0.2944)], [tensor(0.3696), tensor(0.4191)], [tensor(0.4550), tensor(0.4347)], [tensor(0.5253), tensor(0.1383)], [tensor(0.1543), tensor(0.3718)], [tensor(0.7684), tensor(0.5362)], [tensor(0.2751), tensor(0.7631)], [tensor(0.2150), tensor(0.7472)], [tensor(0.9030), tensor(0.7839)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.1431), tensor(0.0637)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.4144)]]

Example test output: [[tensor(0.1431), tensor(0.0637)], [tensor(0.1543), tensor(0.3718)], [tensor(0.2150), tensor(0.7472)], [tensor(0.2547), tensor(0.5348)], [tensor(0.2960), tensor(0.2944)], [tensor(0.2751), tensor(0.7631)], [tensor(0.3696), tensor(0.4191)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.0063)], [tensor(0.4550), tensor(0.4347)], [tensor(0.4657), tensor(0.4144)], [tensor(0.5253), tensor(0.1383)], [tensor(0.6982), tensor(0.6354)], [tensor(0.7140), tensor(0.8641)], [tensor(0.7684), tensor(0.5362)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.9030), tensor(0.7839)]]

Example test reward: -6.889536380767822 - best: 0


Val-Step of greedy: 400

Example test input: [[tensor(0.7140), tensor(0.8641)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.4657), tensor(0.0063)], [tensor(0.2547), tensor(0.5348)], [tensor(0.6982), tensor(0.6354)], [tensor(0.2960), tensor(0.2944)], [tensor(0.3696), tensor(0.4191)], [tensor(0.4550), tensor(0.4347)], [tensor(0.5253), tensor(0.1383)], [tensor(0.1543), tensor(0.3718)], [tensor(0.7684), tensor(0.5362)], [tensor(0.2751), tensor(0.7631)], [tensor(0.2150), tensor(0.7472)], [tensor(0.9030), tensor(0.7839)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.1431), tensor(0.0637)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.4144)]]

Example test output: [[tensor(0.1431), tensor(0.0637)], [tensor(0.1543), tensor(0.3718)], [tensor(0.2150), tensor(0.7472)], [tensor(0.2547), tensor(0.5348)], [tensor(0.2960), tensor(0.2944)], [tensor(0.2751), tensor(0.7631)], [tensor(0.3696), tensor(0.4191)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.0063)], [tensor(0.4550), tensor(0.4347)], [tensor(0.4657), tensor(0.4144)], [tensor(0.5253), tensor(0.1383)], [tensor(0.6982), tensor(0.6354)], [tensor(0.7140), tensor(0.8641)], [tensor(0.7684), tensor(0.5362)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.9030), tensor(0.7839)]]

Example test reward: -6.889536380767822 - best: 0


Val-Step of greedy: 400

Example test input: [[tensor(0.7140), tensor(0.8641)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.4657), tensor(0.0063)], [tensor(0.2547), tensor(0.5348)], [tensor(0.6982), tensor(0.6354)], [tensor(0.2960), tensor(0.2944)], [tensor(0.3696), tensor(0.4191)], [tensor(0.4550), tensor(0.4347)], [tensor(0.5253), tensor(0.1383)], [tensor(0.1543), tensor(0.3718)], [tensor(0.7684), tensor(0.5362)], [tensor(0.2751), tensor(0.7631)], [tensor(0.2150), tensor(0.7472)], [tensor(0.9030), tensor(0.7839)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.1431), tensor(0.0637)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.4144)]]

Example test output: [[tensor(0.1431), tensor(0.0637)], [tensor(0.1543), tensor(0.3718)], [tensor(0.2150), tensor(0.7472)], [tensor(0.2547), tensor(0.5348)], [tensor(0.2960), tensor(0.2944)], [tensor(0.2751), tensor(0.7631)], [tensor(0.3696), tensor(0.4191)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.0063)], [tensor(0.4550), tensor(0.4347)], [tensor(0.4657), tensor(0.4144)], [tensor(0.5253), tensor(0.1383)], [tensor(0.6982), tensor(0.6354)], [tensor(0.7140), tensor(0.8641)], [tensor(0.7684), tensor(0.5362)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.9030), tensor(0.7839)]]

Example test reward: -6.889536380767822 - best: 0


Val-Step of greedy: 400

Example test input: [[tensor(0.7140), tensor(0.8641)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.4657), tensor(0.0063)], [tensor(0.2547), tensor(0.5348)], [tensor(0.6982), tensor(0.6354)], [tensor(0.2960), tensor(0.2944)], [tensor(0.3696), tensor(0.4191)], [tensor(0.4550), tensor(0.4347)], [tensor(0.5253), tensor(0.1383)], [tensor(0.1543), tensor(0.3718)], [tensor(0.7684), tensor(0.5362)], [tensor(0.2751), tensor(0.7631)], [tensor(0.2150), tensor(0.7472)], [tensor(0.9030), tensor(0.7839)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.1431), tensor(0.0637)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.4144)]]

Example test output: [[tensor(0.1431), tensor(0.0637)], [tensor(0.1543), tensor(0.3718)], [tensor(0.2150), tensor(0.7472)], [tensor(0.2547), tensor(0.5348)], [tensor(0.2960), tensor(0.2944)], [tensor(0.2751), tensor(0.7631)], [tensor(0.3696), tensor(0.4191)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.0063)], [tensor(0.4550), tensor(0.4347)], [tensor(0.4657), tensor(0.4144)], [tensor(0.5253), tensor(0.1383)], [tensor(0.6982), tensor(0.6354)], [tensor(0.7140), tensor(0.8641)], [tensor(0.7684), tensor(0.5362)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.9030), tensor(0.7839)]]

Example test reward: -6.889536380767822 - best: 0


Val-Step of greedy: 600

Example test input: [[tensor(0.7140), tensor(0.8641)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.4657), tensor(0.0063)], [tensor(0.2547), tensor(0.5348)], [tensor(0.6982), tensor(0.6354)], [tensor(0.2960), tensor(0.2944)], [tensor(0.3696), tensor(0.4191)], [tensor(0.4550), tensor(0.4347)], [tensor(0.5253), tensor(0.1383)], [tensor(0.1543), tensor(0.3718)], [tensor(0.7684), tensor(0.5362)], [tensor(0.2751), tensor(0.7631)], [tensor(0.2150), tensor(0.7472)], [tensor(0.9030), tensor(0.7839)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.1431), tensor(0.0637)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.4144)]]

Example test output: [[tensor(0.1431), tensor(0.0637)], [tensor(0.1543), tensor(0.3718)], [tensor(0.2150), tensor(0.7472)], [tensor(0.2547), tensor(0.5348)], [tensor(0.2960), tensor(0.2944)], [tensor(0.2751), tensor(0.7631)], [tensor(0.3696), tensor(0.4191)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.0063)], [tensor(0.4550), tensor(0.4347)], [tensor(0.4657), tensor(0.4144)], [tensor(0.5253), tensor(0.1383)], [tensor(0.6982), tensor(0.6354)], [tensor(0.7140), tensor(0.8641)], [tensor(0.7684), tensor(0.5362)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.9030), tensor(0.7839)]]

Example test reward: -6.889536380767822 - best: 0


Val-Step of greedy: 600

Example test input: [[tensor(0.7140), tensor(0.8641)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.4657), tensor(0.0063)], [tensor(0.2547), tensor(0.5348)], [tensor(0.6982), tensor(0.6354)], [tensor(0.2960), tensor(0.2944)], [tensor(0.3696), tensor(0.4191)], [tensor(0.4550), tensor(0.4347)], [tensor(0.5253), tensor(0.1383)], [tensor(0.1543), tensor(0.3718)], [tensor(0.7684), tensor(0.5362)], [tensor(0.2751), tensor(0.7631)], [tensor(0.2150), tensor(0.7472)], [tensor(0.9030), tensor(0.7839)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.1431), tensor(0.0637)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.4144)]]

Example test output: [[tensor(0.1431), tensor(0.0637)], [tensor(0.1543), tensor(0.3718)], [tensor(0.2150), tensor(0.7472)], [tensor(0.2547), tensor(0.5348)], [tensor(0.2960), tensor(0.2944)], [tensor(0.2751), tensor(0.7631)], [tensor(0.3696), tensor(0.4191)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.0063)], [tensor(0.4550), tensor(0.4347)], [tensor(0.4657), tensor(0.4144)], [tensor(0.5253), tensor(0.1383)], [tensor(0.6982), tensor(0.6354)], [tensor(0.7140), tensor(0.8641)], [tensor(0.7684), tensor(0.5362)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.9030), tensor(0.7839)]]

Example test reward: -6.889536380767822 - best: 0


Val-Step of greedy: 600

Example test input: [[tensor(0.7140), tensor(0.8641)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.4657), tensor(0.0063)], [tensor(0.2547), tensor(0.5348)], [tensor(0.6982), tensor(0.6354)], [tensor(0.2960), tensor(0.2944)], [tensor(0.3696), tensor(0.4191)], [tensor(0.4550), tensor(0.4347)], [tensor(0.5253), tensor(0.1383)], [tensor(0.1543), tensor(0.3718)], [tensor(0.7684), tensor(0.5362)], [tensor(0.2751), tensor(0.7631)], [tensor(0.2150), tensor(0.7472)], [tensor(0.9030), tensor(0.7839)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.1431), tensor(0.0637)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.4144)]]

Example test output: [[tensor(0.1431), tensor(0.0637)], [tensor(0.1543), tensor(0.3718)], [tensor(0.2150), tensor(0.7472)], [tensor(0.2547), tensor(0.5348)], [tensor(0.2960), tensor(0.2944)], [tensor(0.2751), tensor(0.7631)], [tensor(0.3696), tensor(0.4191)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.0063)], [tensor(0.4550), tensor(0.4347)], [tensor(0.4657), tensor(0.4144)], [tensor(0.5253), tensor(0.1383)], [tensor(0.6982), tensor(0.6354)], [tensor(0.7140), tensor(0.8641)], [tensor(0.7684), tensor(0.5362)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.9030), tensor(0.7839)]]

Example test reward: -6.889536380767822 - best: 0


Val-Step of greedy: 600

Example test input: [[tensor(0.7140), tensor(0.8641)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.4657), tensor(0.0063)], [tensor(0.2547), tensor(0.5348)], [tensor(0.6982), tensor(0.6354)], [tensor(0.2960), tensor(0.2944)], [tensor(0.3696), tensor(0.4191)], [tensor(0.4550), tensor(0.4347)], [tensor(0.5253), tensor(0.1383)], [tensor(0.1543), tensor(0.3718)], [tensor(0.7684), tensor(0.5362)], [tensor(0.2751), tensor(0.7631)], [tensor(0.2150), tensor(0.7472)], [tensor(0.9030), tensor(0.7839)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.1431), tensor(0.0637)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.4144)]]

Example test output: [[tensor(0.1431), tensor(0.0637)], [tensor(0.1543), tensor(0.3718)], [tensor(0.2150), tensor(0.7472)], [tensor(0.2547), tensor(0.5348)], [tensor(0.2960), tensor(0.2944)], [tensor(0.2751), tensor(0.7631)], [tensor(0.3696), tensor(0.4191)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.0063)], [tensor(0.4550), tensor(0.4347)], [tensor(0.4657), tensor(0.4144)], [tensor(0.5253), tensor(0.1383)], [tensor(0.6982), tensor(0.6354)], [tensor(0.7140), tensor(0.8641)], [tensor(0.7684), tensor(0.5362)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.9030), tensor(0.7839)]]

Example test reward: -6.889536380767822 - best: 0


Val-Step of greedy: 600

Example test input: [[tensor(0.7140), tensor(0.8641)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.4657), tensor(0.0063)], [tensor(0.2547), tensor(0.5348)], [tensor(0.6982), tensor(0.6354)], [tensor(0.2960), tensor(0.2944)], [tensor(0.3696), tensor(0.4191)], [tensor(0.4550), tensor(0.4347)], [tensor(0.5253), tensor(0.1383)], [tensor(0.1543), tensor(0.3718)], [tensor(0.7684), tensor(0.5362)], [tensor(0.2751), tensor(0.7631)], [tensor(0.2150), tensor(0.7472)], [tensor(0.9030), tensor(0.7839)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.1431), tensor(0.0637)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.4144)]]

Example test output: [[tensor(0.1431), tensor(0.0637)], [tensor(0.1543), tensor(0.3718)], [tensor(0.2150), tensor(0.7472)], [tensor(0.2547), tensor(0.5348)], [tensor(0.2960), tensor(0.2944)], [tensor(0.2751), tensor(0.7631)], [tensor(0.3696), tensor(0.4191)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.0063)], [tensor(0.4550), tensor(0.4347)], [tensor(0.4657), tensor(0.4144)], [tensor(0.5253), tensor(0.1383)], [tensor(0.6982), tensor(0.6354)], [tensor(0.7140), tensor(0.8641)], [tensor(0.7684), tensor(0.5362)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.9030), tensor(0.7839)]]

Example test reward: -6.889536380767822 - best: 0


Val-Step of greedy: 600

Example test input: [[tensor(0.7140), tensor(0.8641)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.4657), tensor(0.0063)], [tensor(0.2547), tensor(0.5348)], [tensor(0.6982), tensor(0.6354)], [tensor(0.2960), tensor(0.2944)], [tensor(0.3696), tensor(0.4191)], [tensor(0.4550), tensor(0.4347)], [tensor(0.5253), tensor(0.1383)], [tensor(0.1543), tensor(0.3718)], [tensor(0.7684), tensor(0.5362)], [tensor(0.2751), tensor(0.7631)], [tensor(0.2150), tensor(0.7472)], [tensor(0.9030), tensor(0.7839)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.1431), tensor(0.0637)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.4144)]]

Example test output: [[tensor(0.1431), tensor(0.0637)], [tensor(0.1543), tensor(0.3718)], [tensor(0.2150), tensor(0.7472)], [tensor(0.2547), tensor(0.5348)], [tensor(0.2960), tensor(0.2944)], [tensor(0.2751), tensor(0.7631)], [tensor(0.3696), tensor(0.4191)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.0063)], [tensor(0.4550), tensor(0.4347)], [tensor(0.4657), tensor(0.4144)], [tensor(0.5253), tensor(0.1383)], [tensor(0.6982), tensor(0.6354)], [tensor(0.7140), tensor(0.8641)], [tensor(0.7684), tensor(0.5362)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.9030), tensor(0.7839)]]

Example test reward: -6.889536380767822 - best: 0


Val-Step of greedy: 600

Example test input: [[tensor(0.7140), tensor(0.8641)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.4657), tensor(0.0063)], [tensor(0.2547), tensor(0.5348)], [tensor(0.6982), tensor(0.6354)], [tensor(0.2960), tensor(0.2944)], [tensor(0.3696), tensor(0.4191)], [tensor(0.4550), tensor(0.4347)], [tensor(0.5253), tensor(0.1383)], [tensor(0.1543), tensor(0.3718)], [tensor(0.7684), tensor(0.5362)], [tensor(0.2751), tensor(0.7631)], [tensor(0.2150), tensor(0.7472)], [tensor(0.9030), tensor(0.7839)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.1431), tensor(0.0637)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.4144)]]

Example test output: [[tensor(0.1431), tensor(0.0637)], [tensor(0.1543), tensor(0.3718)], [tensor(0.2150), tensor(0.7472)], [tensor(0.2547), tensor(0.5348)], [tensor(0.2960), tensor(0.2944)], [tensor(0.2751), tensor(0.7631)], [tensor(0.3696), tensor(0.4191)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.0063)], [tensor(0.4550), tensor(0.4347)], [tensor(0.4657), tensor(0.4144)], [tensor(0.5253), tensor(0.1383)], [tensor(0.6982), tensor(0.6354)], [tensor(0.7140), tensor(0.8641)], [tensor(0.7684), tensor(0.5362)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.9030), tensor(0.7839)]]

Example test reward: -6.889536380767822 - best: 0


Val-Step of greedy: 600

Example test input: [[tensor(0.7140), tensor(0.8641)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.4657), tensor(0.0063)], [tensor(0.2547), tensor(0.5348)], [tensor(0.6982), tensor(0.6354)], [tensor(0.2960), tensor(0.2944)], [tensor(0.3696), tensor(0.4191)], [tensor(0.4550), tensor(0.4347)], [tensor(0.5253), tensor(0.1383)], [tensor(0.1543), tensor(0.3718)], [tensor(0.7684), tensor(0.5362)], [tensor(0.2751), tensor(0.7631)], [tensor(0.2150), tensor(0.7472)], [tensor(0.9030), tensor(0.7839)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.1431), tensor(0.0637)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.4144)]]

Example test output: [[tensor(0.1431), tensor(0.0637)], [tensor(0.1543), tensor(0.3718)], [tensor(0.2150), tensor(0.7472)], [tensor(0.2547), tensor(0.5348)], [tensor(0.2960), tensor(0.2944)], [tensor(0.2751), tensor(0.7631)], [tensor(0.3696), tensor(0.4191)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.0063)], [tensor(0.4550), tensor(0.4347)], [tensor(0.4657), tensor(0.4144)], [tensor(0.5253), tensor(0.1383)], [tensor(0.6982), tensor(0.6354)], [tensor(0.7140), tensor(0.8641)], [tensor(0.7684), tensor(0.5362)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.9030), tensor(0.7839)]]

Example test reward: -6.889536380767822 - best: 0


Val-Step of greedy: 800

Example test input: [[tensor(0.7140), tensor(0.8641)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.4657), tensor(0.0063)], [tensor(0.2547), tensor(0.5348)], [tensor(0.6982), tensor(0.6354)], [tensor(0.2960), tensor(0.2944)], [tensor(0.3696), tensor(0.4191)], [tensor(0.4550), tensor(0.4347)], [tensor(0.5253), tensor(0.1383)], [tensor(0.1543), tensor(0.3718)], [tensor(0.7684), tensor(0.5362)], [tensor(0.2751), tensor(0.7631)], [tensor(0.2150), tensor(0.7472)], [tensor(0.9030), tensor(0.7839)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.1431), tensor(0.0637)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.4144)]]

Example test output: [[tensor(0.1431), tensor(0.0637)], [tensor(0.1543), tensor(0.3718)], [tensor(0.2150), tensor(0.7472)], [tensor(0.2547), tensor(0.5348)], [tensor(0.2960), tensor(0.2944)], [tensor(0.2751), tensor(0.7631)], [tensor(0.3696), tensor(0.4191)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.0063)], [tensor(0.4550), tensor(0.4347)], [tensor(0.4657), tensor(0.4144)], [tensor(0.5253), tensor(0.1383)], [tensor(0.6982), tensor(0.6354)], [tensor(0.7140), tensor(0.8641)], [tensor(0.7684), tensor(0.5362)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.9030), tensor(0.7839)]]

Example test reward: -6.889536380767822 - best: 0


Val-Step of greedy: 800

Example test input: [[tensor(0.7140), tensor(0.8641)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.4657), tensor(0.0063)], [tensor(0.2547), tensor(0.5348)], [tensor(0.6982), tensor(0.6354)], [tensor(0.2960), tensor(0.2944)], [tensor(0.3696), tensor(0.4191)], [tensor(0.4550), tensor(0.4347)], [tensor(0.5253), tensor(0.1383)], [tensor(0.1543), tensor(0.3718)], [tensor(0.7684), tensor(0.5362)], [tensor(0.2751), tensor(0.7631)], [tensor(0.2150), tensor(0.7472)], [tensor(0.9030), tensor(0.7839)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.1431), tensor(0.0637)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.4144)]]

Example test output: [[tensor(0.1431), tensor(0.0637)], [tensor(0.1543), tensor(0.3718)], [tensor(0.2150), tensor(0.7472)], [tensor(0.2547), tensor(0.5348)], [tensor(0.2960), tensor(0.2944)], [tensor(0.2751), tensor(0.7631)], [tensor(0.3696), tensor(0.4191)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.0063)], [tensor(0.4550), tensor(0.4347)], [tensor(0.4657), tensor(0.4144)], [tensor(0.5253), tensor(0.1383)], [tensor(0.6982), tensor(0.6354)], [tensor(0.7140), tensor(0.8641)], [tensor(0.7684), tensor(0.5362)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.9030), tensor(0.7839)]]

Example test reward: -6.889536380767822 - best: 0


Val-Step of greedy: 800

Example test input: [[tensor(0.7140), tensor(0.8641)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.4657), tensor(0.0063)], [tensor(0.2547), tensor(0.5348)], [tensor(0.6982), tensor(0.6354)], [tensor(0.2960), tensor(0.2944)], [tensor(0.3696), tensor(0.4191)], [tensor(0.4550), tensor(0.4347)], [tensor(0.5253), tensor(0.1383)], [tensor(0.1543), tensor(0.3718)], [tensor(0.7684), tensor(0.5362)], [tensor(0.2751), tensor(0.7631)], [tensor(0.2150), tensor(0.7472)], [tensor(0.9030), tensor(0.7839)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.1431), tensor(0.0637)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.4144)]]

Example test output: [[tensor(0.1431), tensor(0.0637)], [tensor(0.1543), tensor(0.3718)], [tensor(0.2150), tensor(0.7472)], [tensor(0.2547), tensor(0.5348)], [tensor(0.2960), tensor(0.2944)], [tensor(0.2751), tensor(0.7631)], [tensor(0.3696), tensor(0.4191)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.0063)], [tensor(0.4550), tensor(0.4347)], [tensor(0.4657), tensor(0.4144)], [tensor(0.5253), tensor(0.1383)], [tensor(0.6982), tensor(0.6354)], [tensor(0.7140), tensor(0.8641)], [tensor(0.7684), tensor(0.5362)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.9030), tensor(0.7839)]]

Example test reward: -6.889536380767822 - best: 0


Val-Step of greedy: 800

Example test input: [[tensor(0.7140), tensor(0.8641)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.4657), tensor(0.0063)], [tensor(0.2547), tensor(0.5348)], [tensor(0.6982), tensor(0.6354)], [tensor(0.2960), tensor(0.2944)], [tensor(0.3696), tensor(0.4191)], [tensor(0.4550), tensor(0.4347)], [tensor(0.5253), tensor(0.1383)], [tensor(0.1543), tensor(0.3718)], [tensor(0.7684), tensor(0.5362)], [tensor(0.2751), tensor(0.7631)], [tensor(0.2150), tensor(0.7472)], [tensor(0.9030), tensor(0.7839)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.1431), tensor(0.0637)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.4144)]]

Example test output: [[tensor(0.1431), tensor(0.0637)], [tensor(0.1543), tensor(0.3718)], [tensor(0.2150), tensor(0.7472)], [tensor(0.2547), tensor(0.5348)], [tensor(0.2960), tensor(0.2944)], [tensor(0.2751), tensor(0.7631)], [tensor(0.3696), tensor(0.4191)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.0063)], [tensor(0.4550), tensor(0.4347)], [tensor(0.4657), tensor(0.4144)], [tensor(0.5253), tensor(0.1383)], [tensor(0.6982), tensor(0.6354)], [tensor(0.7140), tensor(0.8641)], [tensor(0.7684), tensor(0.5362)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.9030), tensor(0.7839)]]

Example test reward: -6.889536380767822 - best: 0


Val-Step of greedy: 800

Example test input: [[tensor(0.7140), tensor(0.8641)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.4657), tensor(0.0063)], [tensor(0.2547), tensor(0.5348)], [tensor(0.6982), tensor(0.6354)], [tensor(0.2960), tensor(0.2944)], [tensor(0.3696), tensor(0.4191)], [tensor(0.4550), tensor(0.4347)], [tensor(0.5253), tensor(0.1383)], [tensor(0.1543), tensor(0.3718)], [tensor(0.7684), tensor(0.5362)], [tensor(0.2751), tensor(0.7631)], [tensor(0.2150), tensor(0.7472)], [tensor(0.9030), tensor(0.7839)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.1431), tensor(0.0637)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.4144)]]

Example test output: [[tensor(0.1431), tensor(0.0637)], [tensor(0.1543), tensor(0.3718)], [tensor(0.2150), tensor(0.7472)], [tensor(0.2547), tensor(0.5348)], [tensor(0.2960), tensor(0.2944)], [tensor(0.2751), tensor(0.7631)], [tensor(0.3696), tensor(0.4191)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.0063)], [tensor(0.4550), tensor(0.4347)], [tensor(0.4657), tensor(0.4144)], [tensor(0.5253), tensor(0.1383)], [tensor(0.6982), tensor(0.6354)], [tensor(0.7140), tensor(0.8641)], [tensor(0.7684), tensor(0.5362)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.9030), tensor(0.7839)]]

Example test reward: -6.889536380767822 - best: 0


Val-Step of greedy: 800

Example test input: [[tensor(0.7140), tensor(0.8641)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.4657), tensor(0.0063)], [tensor(0.2547), tensor(0.5348)], [tensor(0.6982), tensor(0.6354)], [tensor(0.2960), tensor(0.2944)], [tensor(0.3696), tensor(0.4191)], [tensor(0.4550), tensor(0.4347)], [tensor(0.5253), tensor(0.1383)], [tensor(0.1543), tensor(0.3718)], [tensor(0.7684), tensor(0.5362)], [tensor(0.2751), tensor(0.7631)], [tensor(0.2150), tensor(0.7472)], [tensor(0.9030), tensor(0.7839)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.1431), tensor(0.0637)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.4144)]]

Example test output: [[tensor(0.1431), tensor(0.0637)], [tensor(0.1543), tensor(0.3718)], [tensor(0.2150), tensor(0.7472)], [tensor(0.2547), tensor(0.5348)], [tensor(0.2960), tensor(0.2944)], [tensor(0.2751), tensor(0.7631)], [tensor(0.3696), tensor(0.4191)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.0063)], [tensor(0.4550), tensor(0.4347)], [tensor(0.4657), tensor(0.4144)], [tensor(0.5253), tensor(0.1383)], [tensor(0.6982), tensor(0.6354)], [tensor(0.7140), tensor(0.8641)], [tensor(0.7684), tensor(0.5362)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.9030), tensor(0.7839)]]

Example test reward: -6.889536380767822 - best: 0


Val-Step of greedy: 800

Example test input: [[tensor(0.7140), tensor(0.8641)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.4657), tensor(0.0063)], [tensor(0.2547), tensor(0.5348)], [tensor(0.6982), tensor(0.6354)], [tensor(0.2960), tensor(0.2944)], [tensor(0.3696), tensor(0.4191)], [tensor(0.4550), tensor(0.4347)], [tensor(0.5253), tensor(0.1383)], [tensor(0.1543), tensor(0.3718)], [tensor(0.7684), tensor(0.5362)], [tensor(0.2751), tensor(0.7631)], [tensor(0.2150), tensor(0.7472)], [tensor(0.9030), tensor(0.7839)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.1431), tensor(0.0637)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.4144)]]

Example test output: [[tensor(0.1431), tensor(0.0637)], [tensor(0.1543), tensor(0.3718)], [tensor(0.2150), tensor(0.7472)], [tensor(0.2547), tensor(0.5348)], [tensor(0.2960), tensor(0.2944)], [tensor(0.2751), tensor(0.7631)], [tensor(0.3696), tensor(0.4191)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.0063)], [tensor(0.4550), tensor(0.4347)], [tensor(0.4657), tensor(0.4144)], [tensor(0.5253), tensor(0.1383)], [tensor(0.6982), tensor(0.6354)], [tensor(0.7140), tensor(0.8641)], [tensor(0.7684), tensor(0.5362)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.9030), tensor(0.7839)]]

Example test reward: -6.889536380767822 - best: 0


Val-Step of greedy: 800

Example test input: [[tensor(0.7140), tensor(0.8641)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.4657), tensor(0.0063)], [tensor(0.2547), tensor(0.5348)], [tensor(0.6982), tensor(0.6354)], [tensor(0.2960), tensor(0.2944)], [tensor(0.3696), tensor(0.4191)], [tensor(0.4550), tensor(0.4347)], [tensor(0.5253), tensor(0.1383)], [tensor(0.1543), tensor(0.3718)], [tensor(0.7684), tensor(0.5362)], [tensor(0.2751), tensor(0.7631)], [tensor(0.2150), tensor(0.7472)], [tensor(0.9030), tensor(0.7839)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.1431), tensor(0.0637)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.4144)]]

Example test output: [[tensor(0.1431), tensor(0.0637)], [tensor(0.1543), tensor(0.3718)], [tensor(0.2150), tensor(0.7472)], [tensor(0.2547), tensor(0.5348)], [tensor(0.2960), tensor(0.2944)], [tensor(0.2751), tensor(0.7631)], [tensor(0.3696), tensor(0.4191)], [tensor(0.3478), tensor(0.6609)], [tensor(0.4657), tensor(0.0063)], [tensor(0.4550), tensor(0.4347)], [tensor(0.4657), tensor(0.4144)], [tensor(0.5253), tensor(0.1383)], [tensor(0.6982), tensor(0.6354)], [tensor(0.7140), tensor(0.8641)], [tensor(0.7684), tensor(0.5362)], [tensor(0.8896), tensor(0.3229)], [tensor(0.8193), tensor(0.7889)], [tensor(0.8640), tensor(0.6204)], [tensor(0.8399), tensor(0.8009)], [tensor(0.9030), tensor(0.7839)]]

Example test reward: -6.889536380767822 - best: 0

 Validation overall avg_reward: -7.608153820037842
Validation overall reward std: 1.0601567029953003
Finished evaluation with 999 steps in 00:00:02.
##################################################################
Total time is 00:00:02
